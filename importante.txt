1- intalar o express: npm i express
2 - intalar typescript : npm i -D typescript
3 - intalar o a integração do typescript com o express: npm i -D @types/express
4 - intala o ts-node-dev para que possa rodar o servidor no ambinte de desenvolvimento: npm i -D ts-node-dev

ESLINT
5 - intalar o estlint: npx eslint --init


6 - intalar a biblioteca http-status-code: npm i http-status-codes
7 - instalar biblioteca dotenv: npm i dotenv   / apos no arquivo index.ts: import "dotenv/config";

RODAR EM PRODUÇÃO
8 - iniciando o arquivo de configuração do typeScript: npx tsc --init
  - No tsconfig.json: "rootDir": "./src", e "outDir": "./build", 
  - fazer o build: npx tsc

9 - instalando a biblioteca yup para validaçãode dados: npm i yup

10- instalando biblioteca de teste jest: npm i jest ts-jest @types/jest
  - depois: npx jest --init
  - intalar biblioteca: npm i -D supertest @types/supertest

11 - intalando biblioteca que ajuda na consulta a banco de dados SQL: npm i knex
   - apos: npm i pg -D
   - : npm i -D @types/pg
   - ou BD Sqlite: npm install sqlite3 -D

12 - criar as migrations: npx knex --knexfile ./src/server/database/knex/Environment.ts migrate:make teste
   - rodar uma migration: npx knex --knexfile ./src/server/database/knex/Environment.ts migrate:latest
   - volta uma migration: npx knex --knexfile ./src/server/database/knex/Environment.ts migrate:rollback
   - volta todas as migrations do DB: npx knex --knexfile ./src/server/database/knex/Environment.ts migrate:rollback --all
   - : npx knex --knexfile ./src/server/database/knex/Environment.ts seed:run
